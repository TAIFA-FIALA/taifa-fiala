name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'docker'
        type: choice
        options:
        - docker
        - host
      restart_services:
        description: 'Restart all services'
        required: false
        default: true
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy TAIFA-FIALA to Production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
        
    - name: Add production server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to production server
      env:
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        DEPLOYMENT_TYPE: ${{ github.event.inputs.deployment_type || 'docker' }}
        RESTART_SERVICES: ${{ github.event.inputs.restart_services || 'true' }}
      run: |
        echo "üöÄ Starting deployment to production..."
        
        # Connect to production server and run deployment
        ssh -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
          set -e
          
          echo "üìÅ Navigating to project directory..."
          cd /Users/jforrest/dev/devprojects/ai-africa-funding-tracker
          
          echo "üîÑ Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          echo "üîß Setting deployment type..."
          if [ "${{ env.DEPLOYMENT_TYPE }}" = "docker" ]; then
            echo "üê≥ Running Docker deployment..."
            chmod +x ./deploy_production_docker.sh
            echo "üîë Using keychain password for Docker deployment..."
            KEYCHAIN_PASSWORD="${{ env.KEYCHAIN_PASSWORD }}" ./deploy_production_docker.sh
          else
            echo "üñ•Ô∏è Running host-based deployment..."
            chmod +x ./deploy_production.sh
            ./deploy_production.sh
          fi
          
          echo "‚úÖ Deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      env:
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
      run: |
        echo "üîç Verifying deployment..."
        
        # Check if services are running
        ssh -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
          echo "üìä Checking service status..."
          
          # Check backend service
          if pgrep -f "uvicorn.*8030" > /dev/null; then
            echo "‚úÖ Backend service is running"
          else
            echo "‚ùå Backend service is not running"
            exit 1
          fi
          
          # Check if port 8030 is listening
          if netstat -an | grep -q ":8030.*LISTEN"; then
            echo "‚úÖ Backend is listening on port 8030"
          else
            echo "‚ùå Backend is not listening on port 8030"
            exit 1
          fi
          
          # Test health endpoint
          if curl -f http://localhost:8030/health > /dev/null 2>&1; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ùå Backend health check failed"
            exit 1
          fi
          
          echo "üéâ All services verified successfully!"
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üéâ Deployment completed successfully!"
          echo "üåê TAIFA-FIALA is now running the latest version"
        else
          echo "‚ùå Deployment failed!"
          echo "üîß Please check the logs and try again"
        fi

  # Optional: Run post-deployment tests
  post-deployment-tests:
    needs: deploy
    runs-on: ubuntu-latest
    name: Post-Deployment Tests
    if: success()
    
    steps:
    - name: Test API endpoints
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://taifa-fiala.net' }}
      run: |
        echo "üß™ Running post-deployment API tests..."
        
        # Test health endpoint
        if curl -f "$PRODUCTION_URL/health" > /dev/null 2>&1; then
          echo "‚úÖ Health endpoint is accessible"
        else
          echo "‚ùå Health endpoint is not accessible"
          exit 1
        fi
        
        # Test main API endpoint
        if curl -f "$PRODUCTION_URL/api/v1/funding-opportunities/" > /dev/null 2>&1; then
          echo "‚úÖ Main API endpoint is accessible"
        else
          echo "‚ùå Main API endpoint is not accessible"
          exit 1
        fi
        
        # Test SSE endpoint (should return 200 or streaming response)
        if curl -f "$PRODUCTION_URL/api/v1/events/stream" --max-time 5 > /dev/null 2>&1; then
          echo "‚úÖ SSE endpoint is accessible"
        else
          echo "‚ö†Ô∏è SSE endpoint may not be accessible (this is expected if events router isn't deployed yet)"
        fi
        
        echo "üéâ Post-deployment tests completed!"